#!/usr/bin/env bash

#######################################
# ~/.bashrc-extra ‚Äî Optional tools & extras
#######################################

# ---- Extract helper ----
extract() {
  case "$1" in
    *.tar.bz2) tar xjf "$1" ;;
    *.tar.gz)  tar xzf "$1" ;;
    *.bz2)     bunzip2 "$1" ;;
    *.rar)     unrar x "$1" ;;
    *.gz)      gunzip "$1" ;;
    *.tar)     tar xf "$1" ;;
    *.tbz2)    tar xjf "$1" ;;
    *.tgz)     tar xzf "$1" ;;
    *.zip)     unzip "$1" ;;
    *.Z)       uncompress "$1" ;;
    *.7z)      7z x "$1" ;;
    *)         echo "'$1' cannot be extracted" ;;
  esac
}

# ---- Lazy-load nvm ----
__load_nvm() {
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" && unset -f __load_nvm __nvm_proxy
}
__nvm_proxy() {
  unset -f nvm node npm npx
  __load_nvm
  command "$@"
}
nvm() { __nvm_proxy nvm "$@"; }
node() { __nvm_proxy node "$@"; }
npm() { __nvm_proxy npm "$@"; }
npx() { __nvm_proxy npx "$@"; }

# ---- Fastfetch (visual) ----
command -v fastfetch &>/dev/null && fastfetch

# ---- SDKMAN (must be at end) ----
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# ---- Optional: Notes system ----
NOTES_FILE="$HOME/.config/notes.txt"
addnote() {
  mkdir -p "$(dirname "$NOTES_FILE")"; touch "$NOTES_FILE"
  local next_num=$(( $(grep -c '^\[[0-9]\+\]' "$NOTES_FILE") + 1 ))
  local note="$*"; [ -z "$note" ] && echo "Usage: addnote <text>" && return 1
  echo "[$next_num]{\"$note\"}" >> "$NOTES_FILE"
  echo "‚úÖ Note #$next_num added."
}
notes() { [ ! -s "$NOTES_FILE" ] && echo "No notes yet!" && return; cat "$NOTES_FILE"; }
delnote() {
  local num="$1"; [ -z "$num" ] && echo "Usage: delnote <num>" && return 1
  sed -i "/^\[$num\]/d" "$NOTES_FILE"
  echo "üóëÔ∏è  Deleted note #$num."
}
renumber_notes() {
  awk -F'{\"' 'BEGIN{i=1} NF{print "["i"]{\""$2; i++}' "$NOTES_FILE" > "${NOTES_FILE}.tmp" && mv "${NOTES_FILE}.tmp" "$NOTES_FILE"
  echo "üî¢ Notes renumbered."
}

note() {
  local num="$1"
  [[ -z $num ]] && echo "Usage: note <num>" && return 1
  [[ ! -f $NOTES_FILE ]] && echo "No notes file found!" && return 1

  # Extract note text safely ‚Äî proper escaping for [ and ]
  local text
  text=$(awk -F'{"' -v n="$num" '$0 ~ "^\\[" n "\\]" {sub(/\}$/,"",$2); print $2}' "$NOTES_FILE")

  [[ -z $text ]] && { echo "‚ùå No note #$num found."; return 1; }

  # Copy to clipboard
  printf '%s' "$text" | xclip -selection clipboard

  echo "üìã Copied note #$num to clipboard:"
  echo "   \"$text\""
}




#######################################
# Auto-display notes on shell startup
#######################################
print_notes_on_startup() {
    if [ -s "$NOTES_FILE" ]; then
        echo -e "\nüìò  Your Notes:\n"
        cat "$NOTES_FILE"
        echo
    else
        echo -e "\nüìò  No notes yet ‚Äî use 'addnote <text>' to create one.\n"
    fi
}

# Automatically print notes only in interactive terminals
if [[ $- == *i* ]]; then
    print_notes_on_startup
fi


xhdmi() {
    # Get the name of the first connected HDMI output
    hdmi_output=$(xrandr | awk '/HDMI-[0-9]+ connected/ {print $1; exit}')

    if [ -n "$hdmi_output" ]; then
        echo "Detected HDMI output: $hdmi_output"
        echo "Enabling $hdmi_output..."
        xrandr --output "$hdmi_output" --auto
    else
        echo "‚ö†Ô∏è  No HDMI device detected."
    fi
}



remindme() {
  local mins="$1"; shift
  (sleep "$((mins * 60))" && notify-send "‚è∞ Reminder" "$*") &
  echo "üîî Reminder set for $mins minute(s): $*"
}


scp_transfer() {
  read -p "Remote IP: " ip
  read -p "Username: " user
  read -p "Remote file path: " src
  read -p "Local destination (path/filename): " dest
  scp "$user@$ip:$src" "$dest"
}



#######################################
# End of ~/.bashrc-extra
#######################################
